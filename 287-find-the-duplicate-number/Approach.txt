Approach : Binary Search
Since the numbers in the array are in the range [1, n] and there's only one repeated number, we can use binary search to find the duplicate number.
We perform binary search on the range [1, n], and for each mid value, we count the number of elements in the array that are less than or equal to the mid value.
If the count is greater than mid, then the duplicate lies in the left half of the range; otherwise, it lies in the right half.
If there's no duplicate, in a sorted array, we would expect nums[i] to be equal to i + 1 for each i. However, with a duplicate, there will be more than i + 1 numbers less than or equal to mid.
We continue narrowing down the range until we find the duplicate number.
Complexity
Time complexity: O(NlogN)
Space complexity: O(1)
